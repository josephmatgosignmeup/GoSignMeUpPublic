@using Gsmu.Api.Data
@using Gsmu.Api.Data.School;
@using Gsmu.Api.Data.School.User;
@using Newtonsoft.Json.Linq;
@model UserModel
@{
    ViewBag.Title = "";
    string cmd = "addnew";
    string adminmode = ViewBag.adminmode;
    string usergroup = ViewBag.usergroup;
    var userModel = Model;
    var usr = new UserInfo();
    DataLists dlists = new DataLists();

    UserWidget userwidgets = dlists.UserWidgets(adminmode);

    List<UserRegFieldSpecs> userregfieldspec = null;
    if (usergroup == "IT")
    {
        userregfieldspec = dlists.AllInstructorUserFields;
    }
    else
    {
        userregfieldspec = dlists.AllStudentUserFields;
    }
   var CourseRequirements = Settings.Instance.GetMasterInfo2().CourseRequirements;
    var CourseRequirementsText= "";
    var disableSecondRequiredButton="true";
    if((CourseRequirements==2) || (CourseRequirements==-1))
    {
        CourseRequirementsText="Course Requirements is On";
        disableSecondRequiredButton = "false";
    }
}

@section Head {
    @Scripts.Render("~/Areas/Public/Scripts/ExtFieldValidation.js")
    @{Html.RenderPartial("UserWidgetStores");}
}

<style>

    .left {float: left;}
    .right {float: right;}

    .clear,.clearer {clear: both;}
    .clearer {
	    display: block;
	    font-size: 0;
	    height: 0;
	    line-height: 0;
    }

    #center-wrapper {
	    margin: 0 auto;
	    width: 920px;
    }

    /* Columns */

    .column {
        border: dashed #FFF 1px ;
    }

    .column:hover {
        border: dashed #BFB 1px ;
    }
    /* Sortable items */

    .sortable-list {
	    background-color: #FDFDFD;
	    list-style: none;
	    margin: 0;
	    min-height: 60px;
	    padding: 10px;
    }
    .sortable-item {
	    background-color: #FFF;
	    /*border: 1px solid #000;*/
	    cursor: move;
	    display: block;
	    /*font-weight: bold;*/
	    margin-bottom: 5px;
	    padding: 0px 0;
	    /*padding: 20px 0;*/
	    /*text-align: center;*/
    }
    

    /* Containment area */

    #containment {
	    background-color: #FFA;
	    height: 230px;
    }


    /* Item placeholder (visual helper) */

    .placeholder {
	    background-color: #BFB;
	    border: 1px dashed #666;
	    height: 28px;
	    margin-bottom: 5px;
    }


    div.no-icon-menu a.x-menu-item {
    padding-left: 0;
    }

.userwidgetmainmenu {
    position: fixed;
    z-index: 2;
    width: 960px;
    top: 0px;
    margin: auto;
    margin-bottom: 5px;        
    opacity: 0.9;
    /* IE 8 */
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=90)";
    /* IE 5-7 */
    filter: alpha(opacity=90);
    /* Netscape */
    -moz-opacity: 0.9;
    /* Safari 1.x */
    -khtml-opacity: 0.9;

}


    .userwidgetcolumnmenu {
    position: fixed;
    top: 23px;
    /*width: 100%;*/ 
    /*display: none;*/
    z-index: 2;
    }

    .urwdgtinput {
        font-size: 12px;
        height: 18px;
    }


    .grad_stud_top_info {
        display: none;
    }

    .grad_stud_top_site {
        display: none;
    }

    .grad_stud_top_all {
        display: none;
    }

    .cart-info-container {
        display: none;
    }

    .grad_stud_footer {
        display: none;
    }

    .grad_stud_footer2 {
        display: none;
    }

    #grad_stud_title {
        display: none;
    }

    #layout-footer-container {
        display: none;
    }

    #layout-welcomeuser {
        display: none;
    }

    .grad_stud_main2 {
        background:none;
        padding:0px;
    }

    .grad_stud_main {
        border:none;
    }

    .grad_stud_table_1 {
        background: none;
    }

    BODY {
        background:none;
        /*margin: 0px;
        padding: 10px;*/
    }
    


#contnt {
	width: 400px;
	vertical-align:top;
}

#DialogBackgrnd{
	display:none; position:fixed;_position:absolute;height:100%;width:100%;
	top:0;left:0;background:#000000;border:1px solid #cecece;z-index:1;
	}

#rwdftlist img{
	top:-2.9em;
	position: absolute;
	margin-left: -1.3em;
}

#contnt li {
	list-style: none;
	margin: 0 0 2px -2.9em;
	padding: 2px;
	padding-left: 0.5em;
	background-color:EAEAEA;
	text-align:left;
	font-size: 14px;
	height: 17px;
	cursor:default;
}


</style>

<script>
    var username = '';
    var instructorsessionId='';
    var usergroup = '@usergroup';
    var cmd = '@cmd';
        dasboardadminmode = true;


    var widgt = {
        "WidgetCount": 0,
        "WidgetItemsCount": 0,
        "ColumnCount": 0,
        "Column": [
            {
                "ID": 0,
                "DispSort": 0,
                "ColFlex": 1,
                "WidthPer": 50,
            }
        ],
        "Widgets": [
            {
                "ID": 0,
                "ColID": 0,
                "DispSort": 0,
                "Name": "",
                "Title": ""
            }
        ],
        "WidgetItems": [
            {
                "ID": 0,
                "WidgetID": 0,
                "DispSort": 0,
                "FieldName": "",
            }
        ]
    }

    widgt = eval(@Html.Raw(Json.Encode(userwidgets)));

    var fldprop = eval(@Html.Raw(Json.Encode(userregfieldspec)));

    var CleanWdgtData = function () {

        for (iwdgtItm = widgt.WidgetItems.length - 1; iwdgtItm >= 0; iwdgtItm--) {

            var WidgetID = widgt.WidgetItems[iwdgtItm].WidgetID;

            WidgetExist = "no";
            for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
                if (widgt.Widgets[iwdgt].ID == WidgetID) { WidgetExist = "yes"; }
            }

            if (WidgetExist == "no") { widgt.WidgetItems.splice(iwdgtItm, 1); }
        }

        for (iwdgtItm = widgt.Widgets.length - 1; iwdgtItm >= 0; iwdgtItm--) {
            if (widgt.Widgets[iwdgtItm].WidgetType == "preset" && widgt.Widgets[iwdgtItm].Url == null) { widgt.Widgets.splice(iwdgtItm, 1); }
        }


    }

    CleanWdgtData();


    var ActivateEditmode = function (DomID, fldname, wdgtID) {
        var vlu = $("#" + DomID).html();
        var htmledt = '<input class="urwdgtinput" id="urwdgtinput' + DomID + '" type="text" value="' + vlu + '" maxlength="500" />'
        htmledt += '<input id="urwdgthidden' + DomID + '" type="hidden" value="' + vlu + '" />'
        htmledt += '<img style="cursor:pointer" onclick="ApplyEditmode(\'' + DomID + '\',\'' + fldname + '\',\'' + wdgtID + '\')" src="/Images/Icons/FamFamFam/save.png" />'
        htmledt += '<img style="cursor:pointer" onclick="CancelEditmode(\'' + DomID + '\')"  src="/Images/Icons/FamFamFam/cancel.png" />'

        $("#" + DomID).html(htmledt)
    }

    var ApplyEditmode = function (DomID, fldname, wdgtID) {
        var vlu = $("#urwdgtinput" + DomID).val();
        $("#" + DomID).html(vlu)
        
        if (fldname == 'wdgtitle') {
            ApplywdgtTitle(wdgtID, vlu);
        } else {
            ApplyFldLabel(fldname, vlu);
        }
    }

    var CancelEditmode = function (DomID) {
        var vlu = $("#urwdgthidden" + DomID).val();
        $("#" + DomID).html(vlu)
    }

    var InputHeaderHT = function (wdgtID) {        
        var int = GetHeaderHT(wdgtID);
        if (int<28) {
            int = 28
        }

        var NewQty = prompt("Please input header height ( minimum of 28 pixels)", int);
        if (NewQty === null) {
            return;
        }
		
        NewQty = NewQty.replace("pixels", "");
        NewQty = NewQty.replace("px", "");
        NewQty = NewQty.replace("PX", "");
        NewQty = NewQty.replace(/ /g,"");

        if (isNaN(NewQty)) {
            alert("Not a number. Try again.")
            return;
        }
        if (NewQty<28) {
            alert("number must be greater than or equal to 28. Try again.")
            return;
        }
        
        var ContformId = "UserWdgt" + wdgtID + "FormCont_header";
        $("#"+ContformId).css("height", NewQty);
        ApplywdgHeadertHT(wdgtID, NewQty);
    }

    var GetHeaderHT = function (wdgtID) {        
        var HeaderHT = "";
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].ID == wdgtID) { HeaderHT = widgt.Widgets[iwdgt].HeaderHT }
        }
        return HeaderHT;
    }


    var ApplyFldLabel = function (fldname, txt) {
        for (var ifld = 0; ifld < fldprop.length; ifld++) {
            if (fldprop[ifld].FieldName == fldname) { fldprop[ifld].FieldLabel = txt }
        }
    };

    var ApplyFldMask = function (fldname, txt, fldstore) {

        for (var ifld = 0; ifld < fldprop.length; ifld++) {
            if (fldprop[ifld].FieldName == fldname) { 
                fldprop[ifld].MaskTxt = txt
                fldprop[ifld].FieldStore = fldstore            
            }
        }

    };

    var ApplyFldProp = function (fldname, prop, vlu) {

        for (var ifld = 0; ifld < fldprop.length; ifld++) {
            if (fldprop[ifld].FieldName == fldname) {
                if (prop == "FieldRequired") {
                    fldprop[ifld].BoolFieldRequired = vlu
                }
                if (prop == "FieldReadOnly") {
                    fldprop[ifld].FieldReadOnly = vlu
                }
                if (prop == "ConfirmRequired") {
                    fldprop[ifld].ConfirmRequired = vlu
                }
                if (prop == "FieldRequiredAll") {
                    fldprop[ifld].BoolFieldRequiredAll = vlu
                }
            
            }
        }

    };

    var ApplywdgtTitle = function (wdgtID, txt) {
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].ID == wdgtID) { widgt.Widgets[iwdgt].Title = txt }
        }
    };

    var ApplywdgHeadertHT = function (wdgtID, txt) {
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].ID == wdgtID) { 
                if(typeof(widgt.Widgets[iwdgt].HeaderHT) == 'undefined'){
                    ID = widgt.Widgets[iwdgt].ID
                    ColID = widgt.Widgets[iwdgt].ColID
                    DispSort = widgt.Widgets[iwdgt].DispSort
                    Name = widgt.Widgets[iwdgt].Name
                    Title = widgt.Widgets[iwdgt].Title
                    Url = widgt.Widgets[iwdgt].Url
                    PanelID = widgt.Widgets[iwdgt].PanelID
                    WidgetType = widgt.Widgets[iwdgt].WidgetType
                    
                    widgt.Widgets.splice(iwdgt, 1);

                    widgt.Widgets.push(
                    {
                        "ID": ID,
                        "ColID": ColID,
                        "DispSort": DispSort,
                        "Name": Name,
                        "Title": Title,
                        "Url": Url,
                        "PanelID": PanelID,
                        "WidgetType": WidgetType,
                        "HeaderHT":1,
                    })
                    
                }else{
                    widgt.Widgets[iwdgt].HeaderHT = txt;
                }


            }
        }
    };



    var SaveUserWidgetPanel = function () {

        Ext.Msg.confirm('Edit mode', 'Are you sure to save and apply this view and settings?', 
        function(btn) {
            if (btn === 'yes') {
                window.LAYOUT.MaskLayout('Loading...');

                var container = '#widgetcont'
                var icol = 0;
                $(container + ' ul.sortable-list').each(function () {
                    icol += 1;
                    var colID = parseInt($(this).attr('id'));
                    for (var isort = 0; isort < $(this).sortable('toArray').length; isort++) {
                        var widgetID = parseInt($(this).sortable('toArray')[isort]);

                        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
                            if (widgt.Widgets[iwdgt].ID == widgetID) {
                                widgt.Widgets[iwdgt].DispSort = isort;
                                widgt.Widgets[iwdgt].ColID = colID;
                            }
                        }
                    }
                });
                UserWidgetSubmitData();
            }
        });
    }


    var ShowUserWidgetEditPanel = function (widgetID, widgetmodel) {

        window.LAYOUT.MaskLayout('Loading...');
        Ext.Ajax.request({
            waitMsg: 'Loading...',
            url: config.getUrl('public/user/UserWidgetEdit'),
            params: {
                txtuserwidget: JSON.stringify(widgt),
                txtwidgetmodel: JSON.stringify(widgetmodel),
                txtfld: '{"data":'+ JSON.stringify(fldprop) +'}',
                adminmode: '@adminmode',
                usergroup: '@usergroup'
            },
            success: function (response) {
                $('#' + widgetID).html(response.responseText);
                window.LAYOUT.UnmaskLayout();
            }
        });
    }

    var UserWidgetSubmitData = function() {

        Ext.Ajax.request({
            url: '/public/user/SumbitUserWidget',
            jsonData: JSON.stringify(widgt),
            params: {
                adminmode:'@adminmode'
            },
            success: function (data) {
                UserWidgetSubmitProperties();
            },
            failure: function (jqXHR, textStatus, errorThrown) {
                //...
            }
        });

    }


    var UserWidgetSubmitProperties = function () {

        Ext.Ajax.request({
            url: '/public/user/SumbitUserWidgetProp',
            jsonData: JSON.stringify(fldprop),
            params: {
                adminmode: '@adminmode'
            },
            success: function (data) {
                window.LAYOUT.UnmaskLayout();
                Ext.Msg.alert('User Dashboard', 'Saving Complete.', 
                function(btn) {
                    document.location.reload();
                });

            },
            failure: function (jqXHR, textStatus, errorThrown) {
                //...
            }
        });

    }


    var ComputeFlex = function (updatecol, updatecolval) {

        var Collength = widgt.Column.length
        var SumColFlex = 0;
        for (var icol = 0; icol < Collength; icol++) {
            var ColID = widgt.Column[icol].ID
            if (updatecol == ColID) { widgt.Column[icol].ColFlex = updatecolval }
            var ColFlex = widgt.Column[icol].ColFlex < 1 ? 1 : widgt.Column[icol].ColFlex;
            SumColFlex += ColFlex;
        }

        for (var icol = 0; icol < Collength; icol++) {
            var ColID = widgt.Column[icol].ID
            var DomID = "columncontnum" + ColID;
            var ColFlex = widgt.Column[icol].ColFlex < 1 ? 1 : widgt.Column[icol].ColFlex;
            var ColWidth = parseInt(ColFlex / SumColFlex * 100)

                widgt.Column[icol].WidthPer = ColWidth;
                widgt.Column[icol].ColFlex = ColFlex;

                $('#' + DomID).css('width', ColWidth + '%');

                for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
                    if (widgt.Widgets[iwdgt].ColID == ColID) {
                        if (widgt.Widgets[iwdgt].WidgetType == "preset") {
                            Ext.getCmp(widgt.Widgets[iwdgt].PanelID).doLayout();
                        } else {
                            Ext.getCmp('User' + 'Wdgt' + widgt.Widgets[iwdgt].ID + 'FormCont').doLayout();
                            Ext.getCmp('User' + 'Wdgt' + widgt.Widgets[iwdgt].ID + 'Form').doLayout();
                        }
                    }
                }


        }
    }

    var AppendNewCol = function () {
        var newID = colIDmax() + 1
        widgt.Column.push(
        {
            "ID": newID,
            "DispSort": (colSortmax() + 1),
            "ColFlex": 1,
            "WidthPer": 50,
        }
        );

        var txt = '<div class="column left" id="columncontnum' + newID + '" style="width:50%;">';
        txt += '<p id="columnflexnum' + newID + '" style="width:100%; margin-left:18px"></p>';
        txt += '<ul class="sortable-list" id="' + newID + 'columnsortablenum">';
        txt += '</ul></div>';

        $("#widgetcont").append(txt);

        $('#widgetcont .sortable-list').sortable({
            connectWith: '#widgetcont .sortable-list',
            placeholder: 'placeholder',
        });

        UserWidgetToolColSetting(newID,'1');
        ComputeFlex(0,0);
    }


    var DeleteCol = function (usercolnum) {

        Ext.Msg.confirm('Delete Column', 'Are you sure to delete this whole column and the widgets inside?', 
        function(btn) {
            if (btn === 'yes') {

                if (widgt.Column.length <= 1) {
                    Ext.Msg.alert('Cannot Delete Column', 'Column cannot be empty, must be atleast 1 column remaining.');
                    return;
                }

                for (icol = widgt.Column.length - 1; icol >= 0; icol--) {
                    if (widgt.Column[icol].ID == usercolnum) {widgt.Column.splice(icol,1);}
                }
                var widgtLength = widgt.Widgets.length;
                for (iwdgt = widgtLength - 1; iwdgt >= 0; iwdgt--) {
                    if (widgt.Widgets[iwdgt].ColID == usercolnum) {
                        widgt.Widgets.splice(iwdgt, 1);
                    }
                }
                $("#columncontnum" + usercolnum).remove();
                ComputeFlex(0,0);

            } else {
                return false;
            }
        });
    }


    var DeleteUserWidget = function (usercolnum,userwidget) {
        Ext.Msg.confirm('Delete Widget', 'Are you sure to delete this widget?',
        function (btn) {
            if (btn === 'yes') {
                var wdgtdel = 0;
                var widgtLength = widgt.Widgets.length;

                for (iwdgt = widgtLength - 1; iwdgt >= 0; iwdgt--) {
                    var curwidgt = widgt.Widgets[iwdgt];
                    if (curwidgt.ID == userwidget && curwidgt.ColID == usercolnum && wdgtdel == 0) {
                        $("#columncontnum" + usercolnum + " #" + curwidgt.ID).remove();
                        widgt.Widgets.splice(iwdgt, 1);
                        wdgtdel += 1;
                    }
                }
            } else {
                return false;
            }
        });
    }

 


    var AddNewUserWidget = function (usercolnum, WidgetType, Title, Nametxt, Url, PanelID) {

        var widget = widgtmaxID() + 1;
        var widgetID = widget;
        var renderDom = widget + "render";

        if (WidgetType != "preset") {
            Title = "[edit to change]";
            Nametxt = null;
            Url = null;
            PanelID = null;
        }

        if(WidgetType == "preset" && IswidgetPanelIDExist(PanelID)){
            Ext.Msg.alert('User Dashboard', 'Cannot add exsting preset widget ['+ Title +']. Please drag existing widget or delete first to add.');
            return;
        }

        widgt.Widgets.push(
        {
            "ID": widgetID,
            "ColID": usercolnum,
            "DispSort": (widgtSortmax() + 1),
            "Name": Nametxt,
            "Title": Title,
            "Url": Url,
            "PanelID": PanelID,
            "WidgetType": WidgetType,
            "HeaderHT":0,
        }
        );

        var BlankUserWidget = Ext.create('Ext.form.Panel', {
            bodyPadding: 10,
            items: []
        });

        
        var txt = '<li class="sortable-item" id="' + widget + '"><div id="' + renderDom + '" style="position:relative;min-height:100px; padding-bottom:20px; "></div></li>'
        $("#"+ usercolnum +"columnsortablenum").append(txt);

        loadAllWidgetFields('addnew', '@usergroup')

        $('#widgetcont .sortable-list').sortable({
            connectWith: '#widgetcont .sortable-list',
            placeholder: 'placeholder',
        });

    }



    var widgtmaxID = function () {
        var widgtmaxIDval = 0;
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].ID > widgtmaxIDval) {

                widgtmaxIDval = widgt.Widgets[iwdgt].ID
            }
        }
        return widgtmaxIDval;
    };

    var GetwidgetColIDbyPlID = function (PanelID) {
        var widgetColID = "";
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].PanelID == PanelID) { widgetColID = widgt.Widgets[iwdgt].ColID }
        }
        return widgetColID;
    };

    var GetwidgetIDbyPlID = function (PanelID) {
        var widgetID = "";
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].PanelID == PanelID) { widgetID = widgt.Widgets[iwdgt].ID }
        }
        return widgetID;
    };

    var IswidgetPanelIDExist = function (PanelID) {
        var PanelIDExist = false;
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].PanelID == PanelID) { PanelIDExist = true }
        }
        return PanelIDExist;
    };

    var GetwidgtTitle = function (wdgtID) {
        var widgtTitle = "";
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].ID == wdgtID) { widgtTitle = widgt.Widgets[iwdgt].Title }
        }
        return widgtTitle;
    };

    var GetwidgtIndex = function (wdgtID) {
        var widgtIndex = 0;
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].ID == wdgtID) { widgtIndex = iwdgt}
        }
        return widgtIndex;
    };

    var GetwidgtModel = function (wdgtID) {
        var widgtModel = null;
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].ID == wdgtID) { widgtModel = widgt.Widgets[iwdgt] }
        }
        return widgtModel;
    };

    var widgtSortmax = function () {
        var widgtSortmaxval = -1;
        for (var iwdgt = 0; iwdgt < widgt.Widgets.length; iwdgt++) {
            if (widgt.Widgets[iwdgt].DispSort > widgtSortmaxval) { widgtSortmaxval = widgt.Widgets[iwdgt].DispSort }
        }
        return widgtSortmaxval;
    };

    var fieldIDmax = function (wdgtID) {
        var fieldIDmaxval = -1;
        for (var ifield = 0; ifield < widgt.WidgetItems.length; ifield++) {
            if (widgt.WidgetItems[ifield].ID > fieldIDmaxval && widgt.WidgetItems[ifield].WidgetID == wdgtID) { fieldIDmaxval = widgt.WidgetItems[ifield].ID }
        }
        return fieldIDmaxval;
    };

    var fieldSortmax = function (wdgtID) {
        var fieldSortmaxval = -1;
        for (var ifield = 0; ifield < widgt.WidgetItems.length; ifield++) {
            if (widgt.WidgetItems[ifield].DispSort > fieldSortmaxval && widgt.WidgetItems[ifield].WidgetID == wdgtID) { fieldSortmaxval = widgt.WidgetItems[ifield].DispSort }
        }
        return fieldSortmaxval;
    };

    var GetfieldLabelbyFldnym = function (fldname) {
        var fieldLabelTxt = "";
        for (var ifld = 0; ifld < fldprop.length; ifld++) {
            if (fldprop[ifld].FieldName == fldname) {
                fieldLabelTxt = fldprop[ifld].FieldLabel + (fldprop[ifld].BoolFieldRequired ? "*" : "")
            }
        }
        return fieldLabelTxt;
    };


    var colIDmax = function () {
        var colIDmmaxval = 0;
        for (var icol = 0; icol < widgt.Column.length; icol++) {
            if (widgt.Column[icol].ID > colIDmmaxval) { colIDmmaxval = widgt.Column[icol].ID }
        }
        return colIDmmaxval;
    };

    var colSortmax = function () {
        var colSortmaxval = -1;
        for (var icol = 0; icol < widgt.Column.length; icol++) {
            if (widgt.Column[icol].DispSort > colSortmaxval) { colSortmaxval = widgt.Column[icol].DispSort }
        }
        return colSortmaxval;
    };


    var UserWidgetToolColSetting = function (usercolnum,flexvalue) {

        Ext.create('Ext.Button', {
            tooltip: 'Column Settings',
            icon: '/Images/Icons/FamFamFam/settings.png',
            renderTo: Ext.get("columnflexnum" + usercolnum),
            menu: {
                xtype: 'menu',
                showSeparator: false,
                width: 200,
                items: [
                {
                    xtype: 'numberfield',
                    fieldLabel: 'Column Width Flex',
                    labelWidth: 120,
                    width: 125,
                    value: flexvalue,
                    maxValue: 10,
                    minValue: 1,
                    listeners: {
                        change: function (field, value) {
                            ComputeFlex(usercolnum, value)
                        }
                    }
                }, {
                    xtype: 'menuseparator',
                }, {
                    text: 'Add New Column (leftmost)',
                    listeners: {
                        click: function () {
                            AppendNewCol();
                        }
                    }
                }, {
                    text: 'Delete This Column',
                    listeners: {
                        click: function () {
                            DeleteCol(usercolnum);
                        }
                    }
                }, {
                    xtype: 'menuseparator',
                }, {
                    text: 'Add Blank Widget',
                    listeners: {
                        click: function () {
                            AddNewUserWidget(usercolnum,'',null);
                        }
                    }
                }, {
                    xtype: 'menuseparator',
                }, {
                    text: 'Add Preset Widgets',
                    menu: {
                        xtype: 'menu',
                        items: [{
                            text: 'Admin Actions',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', 'Actions','actions','UserActions?cmd=addnew','UserDashboardActions');
                                }
                            }
                        },{
                            text: 'Admin Reports',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', 'Reports','reports','UserReports?cmd=addnew','UserDashboardReports');
                                }
                            }
                        },{
                            text: 'Certificate',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', 'Certificate and Certification','certandcertifcation','UserCertificates?cmd=addnew','UserDashboardCertificates');
                                }
                            }
                        },{
                            text: 'Courses',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', 'Courses','courses','UserCourses?cmd=addnew','UserDashboardCourses');
                                }
                            }
                        },{
                            text: 'Memberships',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', 'Memberships','courses','UserMemberships?cmd=addnew','UserDashboardMemberships');
                                }
                            }
                        },{
                            text: 'Emails',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', 'Received Emails','recievdemails','UserEmails?cmd=addnew','UserDashboardReceivedEmail');
                                }
                            }
                        },{
                            text: 'Roles',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', 'Role','role','UserRoles?cmd=addnew','UserDashboardRoles');
                                }
                            }
                        }, {
                            text: '@Settings.Instance.GetMasterInfo2().CreditHoursName Purchase',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', '@Settings.Instance.GetMasterInfo2().CreditHoursName Transactions', 'coursehours', 'UserReportsCourseTransactions?cmd=addnew', 'UserDashCourseHoursTransactions');
                                }
                            }
                        }, {
                            text: 'User Enrolled Courses for Other Students',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', 'User Enrolled Courses for Other Students', 'otherusercourses', 'UserEnrolledOtherStudents?cmd=addnew', 'OtherUserDashCourse');
                                }
                            }                        
                        },{
                            text: 'Surveys',
                            listeners: {
                                click: function () {
                                    AddNewUserWidget(usercolnum, 'preset', 'Surveys','surveys','UserSurveys?cmd=addnew','UserDashboardSurveys');
                                }
                            }
                        }]
                    }
                }

                ]
            }
        });

    }


    var UserWidgetFieldButtonDelete = function (fldname, wdgtID) {

        Ext.create('Ext.Button', {
            tooltip: 'Hide Field',
            icon: '/Images/Icons/FamFamFam/cross.png',
            border: 0,
            renderTo: Ext.get("divUserWidgetFieldButtonDelete" + fldname),
            handler: function() {
                UserWigetDeleteField(fldname, wdgtID);
            }
            
        });
    }


    var UserWidgetFieldButtonOptions = function (fldname, wdgtID) {
        var prf = "divUserWidgetField";
        var FieldGrp = $("#" + prf + "FieldGrp" + fldname).val();
        var FieldReadOnly = $("#" + prf + "FieldReadOnly" + fldname).val();
        var FieldRequired = $("#" + prf + "FieldRequired" + fldname).val();
        var FieldRequiredAll  = $("#" + prf + "FieldRequiredAll" + fldname).val();
        var ConfirmRequired = $("#" + prf + "ConfirmRequired" + fldname).val();
        var MaskTxt = $("#" + prf + "MaskTxt" + fldname).val();

        var hideFieldOptnButton = false;

        var hideConfirmRequired = true;
        var disabledConfirmRequired = false;
        var hideSecondRequiredButton = true;
        var hideMaskTitle = true;
        var hideNoMask = true;
        var hideYYYYMMDD = true;
        var hideMMDDYYYY = true;
        var hideGender = true;
        var hideEthnicity1 = true;
        var hideEthnicity2 = true;
        var hideRace = true;
        var hideDepartment = true;
        var hideYesNo = true;
        var hideSelection = true;
        var hide2LetterStateAbbrev = true;
        var hideTelmask = true;
        var hideSSlong = true;
        var hideSSshort = true;
        var hideemailusername = true;
        var hideemail = true;
        if (fldname=="school"){
            hideSecondRequiredButton = false;
       }


        switch (FieldGrp) {
            case "presetfield":

                switch (fldname) {
                    case "email":
                        hideMaskTitle = false;
                        hideNoMask = false;
                        hideemail = false;
                        hideConfirmRequired = false;
                        disabledConfirmRequired = true;
                        break;

                    case "username":
                        hideMaskTitle = false;
                        hideNoMask = false;
                        hideemailusername = false;
                        break;

                    case "state":
                        hideMaskTitle = false;
                        hideNoMask = false;
                        hide2LetterStateAbbrev = false;
                        break;

                    case "homephone":
                    case "workphone":
                    case "fax":
                        hideMaskTitle = false;
                        hideNoMask = false;
                        hideTelmask = false;
                        break;

                    case "studnum":
                        hideConfirmRequired = false;
                        disabledConfirmRequired = true;
                        break;

                    case "ss":
                        hideNoMask = false;
                        hideSSlong = false;
                        hideSSshort = false;
                        hideConfirmRequired = false;
                        disabledConfirmRequired = false;
                        break;

                }


                break;
            case "customfield":

                hideMaskTitle = false;
                hideNoMask = false;
                hideYYYYMMDD = false;
                hideMMDDYYYY = false;
                hideGender = false;
                hideEthnicity1 = false;
                hideEthnicity2 = false;
                hideRace = false;
                hideDepartment = false;
                hideYesNo = false;
                hideSelection = false;
                hide2LetterStateAbbrev = false;

                break;
            case "affiliaton":

                break;
            default:
        }

        if (fldname == "profileimage") {
            hideFieldOptnButton = true;
        }



        Ext.create('Ext.Button', {
            tooltip: 'Field Options',
            icon: '/Images/Icons/FamFamFam/settings.png',
            arrowCls:'',
            border: 0,
            hidden: hideFieldOptnButton,
            renderTo: Ext.get(prf + "ButtonOptions" + fldname),
            menu: {
                xtype: 'menu',
                showSeparator: false,
                width:200,
                items: [
                {
                    xtype: 'label',
                    html: '<b>Field Options:</b>'
                }, {

                    xtype: 'checkboxgroup',
                    columns: 1,
                    vertical: true,
                    items: [
                    {
                        boxLabel: 'Required',
                        name: 'fieldopt',
                        checked: (FieldRequired == 'true' ? true : false),
                        listeners: {
                            change: function (field, newValue, oldValue) { ApplyFldProp(fldname, 'FieldRequired', newValue) }
                        }

                    },
                    {   xtype: 'label',
                    html:'@CourseRequirementsText',
                    hidden:hideSecondRequiredButton
                    },
                    {
                            boxLabel: 'Required All',
                            hidden: hideSecondRequiredButton,
                            disabled:@disableSecondRequiredButton,
                            name: 'fieldopt',
                            checked: (FieldRequiredAll == 'true' ? true : false),
                            listeners: {
                                change: function (field, newValue, oldValue) { ApplyFldProp(fldname, 'FieldRequiredAll', newValue) }
                            }

                        },
                    {
                        boxLabel: 'Read Only',
                        name: 'fieldopt',
                        checked: (FieldReadOnly == 'true' ? true : false),
                        listeners: {
                            change: function (field, newValue, oldValue) { ApplyFldProp(fldname, 'FieldReadOnly', newValue) }
                        }

                    },
                    {
                        boxLabel: 'Confirm',
                        name: 'fieldopt',
                        hidden: hideConfirmRequired,
                        disabled: disabledConfirmRequired,
                        checked: (ConfirmRequired == 'true' || disabledConfirmRequired == true ? true : false),
                        listeners: {
                            change: function (field, newValue, oldValue) { ApplyFldProp(fldname, 'ConfirmRequired', newValue) }
                        }

                    }]
                },
                {
                    xtype: 'menuseparator',
                    hidden: hideMaskTitle
                },
                {
                    xtype: 'label',
                    html: '<b>Mask:</b>  [ ' + MaskTxt +' ]',
                    hidden: hideMaskTitle
                }, {

                    xtype: 'radiogroup',
                    columns: 1,
                    vertical: true,
                    items: [
                    {
                        boxLabel: 'No Mask' ,
                        name: 'mask',
                        checked: (MaskTxt == 'No Mask' ? true : false),
                        hidden: hideNoMask,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'No Mask','') } }
                        }

                    },
                    {
                        boxLabel: 'YYYY/MM/DD',
                        name: 'mask',
                        checked: (MaskTxt == 'YYYY/MM/DD' ? true : false),
                        hidden: hideYYYYMMDD,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'YYYY/MM/DD','') } }
                        }

                    },
                    {
                        boxLabel: 'MM/DD/YYYY',
                        name: 'mask',
                        checked: (MaskTxt == 'MM/DD/YYYY' ? true : false),
                        hidden: hideMMDDYYYY,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'MM/DD/YYYY','') } }
                        }
                    },
                    {
                        boxLabel: 'Gender',
                        name: 'mask',
                        checked: (MaskTxt == 'Gender' ? true : false),
                        hidden: hideGender,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'Gender','storeGender') } }
                        }

                    },
                    {
                        boxLabel: 'Ethnicity 1',
                        name: 'mask',
                        checked: (MaskTxt == 'Ethnicity 1' ? true : false),
                        hidden: hideEthnicity1,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'Ethnicity 1','storeEthnicity1') } }
                        }

                    },
                    {
                        boxLabel: 'Ethnicity 2',
                        name: 'mask',
                        checked: (MaskTxt == 'Ethnicity 2' ? true : false),
                        hidden: hideEthnicity2,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'Ethnicity 2','storeEthnicity2') } }
                        }

                    },
                    {
                        boxLabel: 'Race',
                        name: 'mask',
                        checked: (MaskTxt == 'Race' ? true : false),
                        hidden: hideRace,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'Race','') } }
                        }

                    },
                    {
                        boxLabel: 'Department',
                        name: 'mask',
                        checked: (MaskTxt == 'Department' ? true : false),
                        hidden: hideDepartment,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'Department','') } }
                        }

                    },
                    {
                        boxLabel: 'Yes/No',
                        name: 'mask',
                        checked: (MaskTxt == 'Yes/No' ? true : false),
                        hidden: hideYesNo,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'Yes/No','storeYesNo') } }
                        }

                    },
                    {
                        boxLabel: '2 Letter State Abbrev.',
                        name: 'mask',
                        checked: (MaskTxt == '2LetterStateAbbrev' ? true : false),
                        hidden: hide2LetterStateAbbrev,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, '2LetterStateAbbrev','storeState') } }
                        }
                    },
                    {
                        boxLabel: '(###) ###-####',
                        name: 'mask',
                        checked: (MaskTxt == '(###) ###-####' ? true : false),
                        hidden: hideTelmask,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, '(###) ###-####','') } }
                        }
                    },
                    {
                        boxLabel: '###-##-####',
                        name: 'mask',
                        checked: (MaskTxt == '###-##-####' ? true : false),
                        hidden: hideSSlong,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, '###-##-####','') } }
                        }
                    },
                    {
                        boxLabel: '####',
                        name: 'mask',
                        checked: (MaskTxt == '####' ? true : false),
                        hidden: hideSSshort,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, '####','') } }
                        }
                    },
                    {
                        boxLabel: 'email for username',
                        name: 'mask',
                        checked: (MaskTxt == 'emailusername' ? true : false),
                        hidden: hideemailusername,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'emailusername','') } }
                        }
                    },
                    {
                        boxLabel: 'email',
                        name: 'mask',
                        checked: (MaskTxt == 'email' ? true : false),
                        hidden: hideemail,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { ApplyFldMask(fldname, 'email','') } }
                        }
                    },
                    {
                        boxLabel: 'Selection',
                        name: 'mask',
                        checked: (MaskTxt == 'SelectionCheckbox' || MaskTxt == 'SelectionListSingleSelect' || MaskTxt == 'SelectionListMultiSelect' ? true : false),
                        hidden: hideSelection,
                        listeners: {
                            change: function (field, newValue, oldValue) { if (newValue) { 
                                showDialogBx('FieldListValue' + fldname, 'FieldListType' + fldname, 'FieldMask' + fldname, fldname);
                                ApplyFldMask(fldname, 'SelectionCheckbox','');
                            } }
                        }
                    },
                    {
                        xtype: 'button',
                        iconAlign: 'left',
                        text: 'Show List',
                        hidden: hideSelection,
                        handler: function () {
                            showDialogBx('FieldListValue' + fldname, 'FieldListType' + fldname, 'FieldMask' + fldname, fldname);
                        }

                    }


                    ]
                }

                ]
            }
        });

    }

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    var CLCounntList = 0; var ActvCntrl = ""; var ActvCntrl2 = ""; var ActvCntrl3 = ""; var lstindx = 0;

    var popupStatus = 0;
    function showDialogBx(jCntrlName, jCntrlName2, jCntrlName3, fldname) {
        ActvCntrl = jCntrlName; ActvCntrl2 = jCntrlName2; ActvCntrl3 = jCntrlName3;
        centerDialogBx();
        loadListDta(fldname);
        if (popupStatus == 0) {
            $("#DialogBackgrnd").css({ "opacity": "0.5" });
            $("#DialogBackgrnd").fadeIn("fast"); $("#DialogBx").fadeIn("fast");
            popupStatus = 1;
        }
    }

    var DelImg = "<img title='Delete Item' src='Images\/Icons\/FamFamFam\/cross.png' style='cursor:pointer; height:10px; position: absolute; left:390px' onclick='DelEment(this)'>";
    var EditImg = "<img title='Edit Item' src='Images\/Icons\/FamFamFam\/pencil.png' style='cursor:pointer; height:10px; position: absolute; left:370px' onclick='EditEment(this)'>";

    function loadListDta(fldname) {
        var i = 0;
        var jlst = $("#" + ActvCntrl).val();
        var jSeltyp = $("#" + ActvCntrl2).val();
        $("#Updytrw").hide();
        $("#Chkbox").prop("checked", false);
        $("#Sellist").prop("checked", false);
        $("#SellistSingle").prop("checked", false);
        $("#DialogBxActvFld").val(fldname);

        switch (jSeltyp) {
            case "1":
                $("#SellistSingle").prop("checked", true);
                break;
            case "2":
                $("#Sellist").prop("checked", true);
                break;
            default:
                $("#Chkbox").prop("checked", true);
        }

        var n = jlst.search("~");
        if (n > 1) {
            var jArray = jlst.split("~");
            var ArryCnt = jArray.length - 1
            for (i = 0; i <= ArryCnt; i++) {
                if (i == 1) {
                    $(".dftlist:last").html("<li class='rwdftlist'><a>" + jArray[i - 1] + "</a>" + EditImg + DelImg + "</li>");
                } else {
                    $(".rwdftlist:last").after("<li class='rwdftlist'><a>" + jArray[i - 1] + "</a>" + EditImg + DelImg + "</li>");
                }
            }
            CLCounntList = i - 1;
        } else {
            $(".dftlist:last").html('');
            CLCounntList = 0;
        }
    }

    function ApplyChnges() {
        var jval = ""
        var jlstval = "(no data)"
        for (i = 0; i <= (CLCounntList - 1) ; i++) {
            var jdta = $("ul.dftlist li a:eq(" + (i) + ")").html();

            jval += jdta + "\~";
            if (i == 0) { jlstval = "List:" }
            jlstval += "\n " + jdta
        }

        $("#" + ActvCntrl).val(jval);
        var DialogBxActvFld = $("#DialogBxActvFld").val();

        var MaskTxtSelfld = 'SelectionCheckbox';
        if ($("#Chkbox").is(':checked')) {
            $("#" + ActvCntrl3).val("checkbox");
            $("#" + ActvCntrl2).val('0');
        }
        if ($("#SellistSingle").is(':checked')) {
            MaskTxtSelfld = 'SelectionListSingleSelect';
            $("#" + ActvCntrl3).val(MaskTxtSelfld);
            $("#" + ActvCntrl2).val('1');
        }
        if ($("#Sellist").is(':checked')) {
            MaskTxtSelfld = 'SelectionListMultiSelect';
            $("#" + ActvCntrl3).val(MaskTxtSelfld);
            $("#" + ActvCntrl2).val('2');
        }
        ApplyFldMask(DialogBxActvFld, MaskTxtSelfld,'');
        disablePopup();
    }

    function AddItemList() {
        CLCounntList += 1;
        var jNwDta = $("#AddTxt").val();
        if (CLCounntList == 1) {
            $(".dftlist:last").html("<li class='rwdftlist'><a>" + jNwDta + "</a>" + EditImg + DelImg + "</li>");
        } else {
            $(".rwdftlist:last").after("<li class='rwdftlist'><a>" + jNwDta + "</a>" + EditImg + DelImg + "</li>");
        }
        $("#AddTxt").val('').focus();
    }

    function DelEment(jcntrl) {
        CLCounntList -= 1;
        $(jcntrl).parent().remove();
    }

    function EditEment(jcntrl) {
        $("#Addrw").hide()
        $("#Updytrw").show("slow")
        lstindx = $(jcntrl).parent().index();
        var jdta = $("ul.dftlist li a:eq(" + lstindx + ")").html();
        $("#UpdytTxt").val(jdta).focus();
    }

    function Updyt() {
        $("ul.dftlist li a:eq(" + lstindx + ")").html($("#UpdytTxt").val());
        $("#Updytrw").hide();
        $("#Addrw").show("slow");
    }

    function CanclUpdate() {
        $("#Updytrw").hide();
        $("#Addrw").show("slow");
    }

    function disablePopup() {
        if (popupStatus == 1) {
            $("#DialogBackgrnd").fadeOut("fast"); $("#DialogBx").fadeOut("fast");
            popupStatus = 0;
        }
    }

    function centerDialogBx() {
        var windowHeight = $(window).height();
        var windowWidth = $(window).width();
        var popupHeight = $("#DialogBx").height();
        var popupWidth = $("#DialogBx").width();

        $("#DialogBx").css({
            "position": "absolute",
            //"top": windowHeight/2-popupHeight,
            "top": Math.abs((($(window).height() - popupHeight) / 4) + $(window).scrollTop()),
            "left": windowWidth / 2 - popupWidth / 2
        });

        $("#DialogBackgrnd").css({
            "height": windowHeight
        });
    }

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    var openSelectionDialog = function () {
        Ext.create('Ext.window.Window', {
            id: 'CourseDetailsWindow',
            modal: true,
            //border: false,
            //frame: false,
            //header: false,
            layout: 'anchor',
            tbar: false,
            width: 500,
            autoScroll: true,
            items: [{
                xtype: 'label',
                html: '<b>Selection Type:</b>  ',
                }, {
                xtype: 'radiogroup',
                columns: 3,
                vertical: false,
                items: [
                    {
                        boxLabel: 'CheckBox ',
                        name: 'selectiontyp',
                        //checked: (MaskTxt == '####' ? true : false)
                    },
                    {
                        //boxLabel: 'Single-Select List',
                        boxLabel: 'Single-Select Combobox',
                        name: 'selectiontyp',
                        //checked: (MaskTxt == '####' ? true : false)
                    },
                    {
                        boxLabel: 'Multi-Select List',
                        name: 'selectiontyp',
                        //checked: (MaskTxt == '####' ? true : false)
                    }

                ]
                },
            {
                xtype: 'label',
                html: 'List: (Drag item to sort)',
            }
            ]
        }).show();
    }

    var UserWigetEditgetItems = function (container, iwdgt) {
        var columns = [];
        var icol = 0;
        var ifld = 0;
        var widgtLength = widgt.WidgetItems.length;
        var widgtPropLength = widgt.Widgets.length;

        //fields
        for (iall = widgtLength - 1; iall >= 0; iall--) {
            if (widgt.WidgetItems[iall].WidgetID == iwdgt) {
                widgt.WidgetItems.splice(iall, 1);
            }
        }

        $(container + ' ul.sortable-list').each(function () {
            icol += 1;
            if (icol == 1) {
                for (var isort = 0; isort < $(this).sortable('toArray').length; isort++) {
                    ifld += 1;
                    var fldContId = $(this).sortable('toArray')[isort];

                    var prefx = fldContId.substr(0, 3);
                    var fldName = fldContId.substr(5, fldContId.length);

                    if (fldName.length > 1) {
                        widgt.WidgetItems.push(
                                {
                                    "ID": ifld,
                                    "WidgetID": iwdgt,
                                    "DispSort": ifld,
                                    "FieldName": fldName,
                                }
                        );
                    }
                }
            }

        });


        return columns.join('|');
    }

    var UserWigetDeleteField = function (fldName, wdgtID) {

        Ext.Msg.confirm('Hide Widget', 'Are you sure to hide this field:' + fldName + '?',
        function (btn) {
            if (btn === 'yes') {

                var widgtLength = widgt.WidgetItems.length;
                for (iall = widgtLength - 1; iall >= 0; iall--) {
                    if (widgt.WidgetItems[iall].FieldName == fldName && widgt.WidgetItems[iall].WidgetID == wdgtID) {
                        widgt.WidgetItems.splice(iall, 1);
                        ShowUserWidgetEditPanel(wdgtID, GetwidgtModel(wdgtID));
                    }
                }

            } else {
                return false;
            }
        });
    }

    var UserWigetAddField = function (fldName, wdgtID) {

        if (CheckIfFieldReplaceExist(fldName, wdgtID) == "noduplicate") {
            UserWigetPushAddField(fldName, wdgtID);

        }
    }


    var UserWigetPushAddField = function (fldName, wdgtID) {

            widgt.WidgetItems.push(
                    {
                        "ID": (fieldIDmax(wdgtID) + 1),
                        "WidgetID": wdgtID,
                        "DispSort": (fieldSortmax(wdgtID) + 1),
                        "FieldName": fldName,
                    }
            );
            ShowUserWidgetEditPanel(wdgtID, GetwidgtModel(wdgtID));
    }




    var CheckIfFieldAlreadyExist = function (ui, wdgtID) {
        var icol = 0;
        var ifld = 0;
        $('#usereditwidgetcont ul.sortable-list').each(function () {
            icol += 1;
            var dragdid = ui.item.context.id;
            if (icol == 2 && dragdid.substr(0, 3) == "new") {
                for (var isort = 0; isort < $(this).sortable('toArray').length; isort++) {
                    var fldContId = $(this).sortable('toArray')[isort];

                    if (ifld == ui.item.index()) {
                        var prefx = fldContId.substr(0, 3);
                        var fldName = fldContId.substr(5, fldContId.length);
                        CheckIfFieldReplaceExist(fldName,ui)

                    }
                    ifld += 1;
                }
            }

        });

    }



    var CheckIfFieldReplaceExist = function (fldName, wdgtID) {

        var activiwdgt = -1;
        var wdgtsatus = "noduplicate";
        for (iwdgt = widgt.WidgetItems.length - 1; iwdgt >= 0; iwdgt--) {
            if (widgt.WidgetItems[iwdgt].FieldName == fldName) {
                var dupWidgetID = widgt.WidgetItems[iwdgt].WidgetID;
                wdgtsatus = "withduplicate";
                activiwdgt = iwdgt;
                Ext.Msg.confirm('Warning', 'The field is currently in use. Clicking "Yes" will remove from "' + GetwidgtTitle(dupWidgetID) + '" and move it here.',
                function (btn) {
                    if (btn === 'yes') {
                        widgt.WidgetItems.splice(activiwdgt, 1);
                        UserWigetPushAddField(fldName, wdgtID);
                        loadWidgetFields(GetwidgtModel(dupWidgetID), cmd, usergroup);
                        wdgtsatus = "replaced";
                    } else {
                        wdgtsatus = "cancel";
                    }
                });
            }
        }
        return wdgtsatus;
    }

    var HideApplyUserWidgetEditPanel = function (iwdgt) {

        var itemStr = UserWigetEditgetItems('#usereditwidgetcont', iwdgt);
        HideUserWidgetEditPanel()
        loadAllWidgetFields('addnew', '@usergroup')
    }

    var toolbarItems = Ext.create('Ext.form.ComboBox', {
        fieldLabel: 'Edit mode',
        emptyText: 'Select from the list',
        labelWidth: 60,
        width: 300,
        store: UserWidgetAdminModes,
        editable: true,
        queryMode: 'local',
        displayField: 'txt',
        valueField: 'vlu',
        value:'@adminmode',
        renderTo: Ext.get('usermenutab'),
        listeners: {
            select: function (combo, record, index) {
                document.location = config.getUrl('public/user/DashboardEdit?mode=' + combo.getValue() + '&adminmode=false');
            }
        }

    });

    Ext.onReady(function () {
        $(".navbar").css("display","none")
            $('#widgetcont .sortable-list').sortable({
                connectWith: '#widgetcont .sortable-list',
                placeholder: 'placeholder',
                update: function () {
                    ComputeFlex(0, 0);
                }

            });
            @if (!userwidgets.Column.Any())
            {
                
                <text>
                AppendNewCol();
                </text>
                
            }

            for (var icol = 0; icol < widgt.Column.length; icol++) {
                UserWidgetToolColSetting(widgt.Column[icol].ID, widgt.Column[icol].ColFlex);
            }

            loadAllWidgetFields('addnew', '@usergroup');

        var container = Ext.get('userwidgetmainmenu');





        Ext.create('Ext.toolbar.Toolbar', {
            renderTo: container,
            width: container.getWidth(),
            padding:'4 2 20 2',
            height: 60,
            items: [
					{
					    xtype: 'tbspacer',
                        width: 20
					},
					toolbarItems,
					{
					    xtype: 'tbfill'
					},
            		{
            		    xtype: 'button',
            		    iconAlign: 'left',
            		    text: 'Cancel Changes',
            		    icon: '/Images/Icons/FamFamFam/arrow_refresh.png',
            		    handler: function () {
            		        Ext.Msg.confirm('Edit mode', 'Are you sure to cancel changes?', 
                            function(btn) {
                                if (btn === 'yes') {
                                    document.location.reload();
                                }
                            });            		        
            		    }
            		},
            		{
            		    xtype: 'button',
            		    iconAlign: 'left',
            		    text: 'Save and Apply',
            		    icon: '/Images/Icons/FamFamFam/save.png',
            		    handler: function () {
            		        SaveUserWidgetPanel();
            		    }
            		},
					{
					    xtype: 'tbspacer',
					    width: 20
					}

            ]

        });




        //$(function () {
            $("#contnt ul").sortable({
                opacity: 0.6, cursor: 'move', update: function () {
                    var order = $(this).sortable() + '';
                    CanclUpdate();
                }
            });
        //});


    });

</script>

<div id="widgetcont" style="width:100%; z-index:99999">
    <div id="userwidgetmainmenu" class="userwidgetmainmenu" style="">
    </div>

    @foreach (var col in userwidgets.Column.OrderBy(c => c.DispSort))
    {
        string WidthPer = col.WidthPer.ToString() + "%";
        string columncontnumID = "columncontnum" + col.ID.ToString();
        string columnflexnumID = "columnflexnum" + col.ID.ToString();
        string columnsortablenumID = col.ID.ToString() + "columnsortablenum" ;
        
    <text>

	<div class="column left" id="@columncontnumID" style=" margin-top:30px; width:@WidthPer;">
        <p class="userwidgetcolumnmenu" id="@columnflexnumID" style="width:100%; margin-left:10px;padding-top: 10px;"></p>

		<ul class="sortable-list" id="@columnsortablenumID">
            @foreach (var wdgt in userwidgets.Widgets.Where(cl => cl.ColID == col.ID).OrderBy(l => l.DispSort))
            {
                string containerID = wdgt.ID.ToString();
                <text>
			    <li class="sortable-item" id="@containerID">
			    </li>
                </text>
            }

		</ul>

	</div>
    </text>
    }

</div>


<div id="DialogBx" align="center" style="width:408px; border:2px solid #cecece; font-size:12px;
	position:fixed; _position:absolute; z-index:2; background:#FFFFFF;display:none">
    <input id="DialogBxActvFld" type="hidden" value=""/>
  <table width="100" border="0" style="background-color:#FFFFFF">
  <tr>
    <td align="right" style="font-size:12px"><a style="cursor:pointer" onClick="disablePopup()">close</a></td>
  </tr>
  <tr style="background-color:#C1C1C1">
    <td>Selection Type:</td>
  </tr>
  <tr>
    <td align="center" style="font-size:14px">
	<label><input name="SelType" id="Chkbox" type="radio" value="" />CheckBox</label>
	<label><input name="SelType" id="SellistSingle" type="radio" value="" />Single-Select Combobox</label>
	<label><input name="SelType" id="Sellist" type="radio" value="" />Multi-Select List</label>
	</td>
  </tr>
  <tr style="background-color:#C1C1C1">
    <td>List: <font size="-1">(Drag item to sort)</font></td>
  </tr>
  <tr>
    <td>
		<div id="contnt">
			<ul class="dftlist" style="cursor:ns-resize">
			</ul>
		</div>
		</td>
  </tr>
  <tr>
    <td id="Updytrw" align="right"><input id="UpdytTxt" type="text" style="width:238px" maxlength="30"/>
	<input type="button" value="Update" onclick="Updyt()"/>
	<input type="button" value="Cancel" onclick="CanclUpdate()"/>
	</td>
  </tr>
  <tr>
    <td id="Addrw" align="right"><input id="AddTxt" type="text" style="width:288px" maxlength="50"/><input name="Input22" type="button" value="Add Item" onclick="AddItemList()"/></td>
  </tr>
  <tr>
    <td align="center"><input type="button" value="Apply" onclick="ApplyChnges()" style="width:100px"/>&nbsp;&nbsp;&nbsp;
      <input type="button" value="Cancel" onclick="disablePopup()" style="width:100px"/></td>
  </tr>
</table>
</div>

<div id="DialogBackgrnd"></div>
