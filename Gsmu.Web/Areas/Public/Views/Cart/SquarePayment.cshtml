
@{
    ViewBag.Title = "Payment";
    string _locationId = (string)ViewBag.LocationId;

    string _appID = Gsmu.Api.Data.Settings.Instance.GetMasterInfo().SquareAppID.Trim();
    var sqjspath = "https://web.squarecdn.com/v1/square.js";
    if (_appID.Contains("sandbox")) { sqjspath = "https://sandbox.web.squarecdn.com/v1/square.js"; }
}


<title>Square Payment Form</title>

<link href="Areas/Public/Styles/Layout.css" rel="stylesheet" />

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script type="text/javascript" src="@sqjspath"></script>
<script type="text/javascript">
    var OrderNo = "@ViewBag.OrderNo";

    const appId = '@_appID';
    const locationId = '@_locationId';


    async function initializeCard(payments) {
        const card = await payments.card();
        await card.attach('#card-container');
        return card;
    }

    // Call this function to send a payment token, buyer name, and other details
    // to the project server code so that a payment can be created with 
    // Payments API
    async function createPayment(token) {
        var _firstname = $("#squarefirstname").val()
        var _lastname = $("#squarelastname").val()

        const body = JSON.stringify({
            locationId,
            sourceId: token,
            firstname: _firstname,
            lastname: _lastname,
        });
        const paymentResponse = await fetch('/Public/Cart/SquarePaymentChargeAsync', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body,
        });
        if (paymentResponse.ok) {
            //return paymentResponse.json();
            return paymentResponse;
        }

        const errorBody = await paymentResponse.text();
        throw new Error(errorBody);
    }
    

    // This function tokenizes a payment method. 
    // The ‘error’ thrown from this async function denotes a failed tokenization,
    // which is due to buyer error (such as an expired card). It is up to the
    // developer to handle the error and provide the buyer the chance to fix
    // their mistakes.
    async function tokenize(paymentMethod) {
        const tokenResult = await paymentMethod.tokenize();
        if (tokenResult.status === 'OK') {
            return tokenResult.token;
        } else {
            let errorMessage = `Tokenization failed-status: ${tokenResult.status}`;
            if (tokenResult.errors) {
                errorMessage += ` and errors: ${JSON.stringify(
                    tokenResult.errors
                )}`;
            }
            throw new Error(errorMessage);
        }
    }

    // Helper method for displaying the Payment Status on the screen.
    // status is either SUCCESS or FAILURE;
    function displayPaymentResults(status) {
        const statusContainer = document.getElementById(
            'payment-status-container'
        );
        if (status === 'SUCCESS') {
            statusContainer.classList.remove('is-failure');
            statusContainer.classList.add('is-success');
            window.location = "/Public/cart/ShowConfirmationReceipt?OrderNumber=" + OrderNo
        } else {
            statusContainer.classList.remove('is-success');
            statusContainer.classList.add('is-failure');
        }

        statusContainer.style.visibility = 'visible';
    }




    document.addEventListener('DOMContentLoaded', async function () {
        if (!window.Square) {
            throw new Error('Square.js failed to load properly');
        }
        const payments = window.Square.payments(appId, locationId);
        let card;
        try {
            card = await initializeCard(payments);
        } catch (e) {
            console.error('Initializing Card failed', e);
            return;
        }

        // Step 5.2: create card payment
        async function handlePaymentMethodSubmission(event, paymentMethod) {
            event.preventDefault();

            try {
                // disable the submit button as we await tokenization and make a
                // payment request.
                cardButton.disabled = true;
                const token = await tokenize(paymentMethod);
                const paymentResults = await createPayment(token);
                window.location = "/Public/cart/ShowConfirmationReceipt?OrderNumber=" + OrderNo
                displayPaymentResults('SUCCESS');
                console.debug('Payment Success', paymentResults);
            } catch (e) {
                cardButton.disabled = false;
                displayPaymentResults('FAILURE');
                console.error(e);
            }
        }

        const cardButton = document.getElementById(
            'card-button'
        );
        cardButton.addEventListener('click', async function (event) {
            var _firstname = $("#squarefirstname").val()
            var _lastname = $("#squarelastname").val()
            if (_firstname.length == 0 || _lastname.length == 0) {
                alert("First Name and Last Name are required")
                return;
            }

            await handlePaymentMethodSubmission(event, card);
        });


    });





</script>
<style id="Style1" type="text/css" runat="server">
    .sq-input {
        border: 1px solid #CCCCCC;
        margin-bottom: 10px;
        padding: 1px;
    }

    .sq-input--focus {
        outline-width: 5px;
        outline-color: #70ACE9;
        outline-offset: -1px;
        outline-style: auto;
    }

    .sq-input--error {
        outline-width: 5px;
        outline-color: #FF9393;
        outline-offset: 0px;
        outline-style: auto;
    }
</style>

<div class="cart-steps-wrap">
    <div class="cart-steps cart-step3"></div>
    <ul class="cart-steps-text" style="list-style-type: none;">
        <li class="cart-step-1 current-step">Log in/ Create Account</li>
        <li class="cart-step-2">Review</li>
        <li class="cart-step-3">Payments</li>
        <li class="cart-step-4">Receipt & Confirmation</li>
    </ul>
</div>




<div style="float:left;">




    <div style="width:50%;float: left; padding:10px; position:relative; text-align:left;">
        <h1>Payment</h1>

        <div style="font-size: 18px;margin-top : 8px; margin-bottom: 8px; margin-left:8px; text-align:right;">
            Amount: &nbsp; @ViewBag.PaymentTotalLbl
        </div>

        <div style="font-size: 18px;margin-top : 8px; margin-bottom: 8px; margin-left:8px; text-align:right;">
            Order Number: &nbsp;@ViewBag.OrderNo
        </div>

        <div style="font-size: 18px;margin-top : 8px; margin-bottom: 8px; margin-left:0px; text-align:right;">
            <input class="form-control form-control-lg" type="text" id="squarefirstname" placeholder="First Name" style="height:50px;">
        </div>
        <div style="font-size: 18px;margin-top : 8px; margin-bottom: 8px; margin-left:0px; text-align:right;">
            <input class="form-control  form-control-lg" type="text" id="squarelastname" placeholder="Last Name" style="height:50px;">
        </div>

        <form id="payment-form">

            <div id="card-container"></div>
            <button id="card-button" type="button">Pay Now</button>
            &nbsp;
            <input type="button" onclick="location.href='/public/course/browse'" value="Cancel" />
        </form>
        <div id="payment-status-container"></div>

    </div>

    <div style="width:30%;float: right;  position:relative; padding-top:50px;
                                text-align: left; font-size: small; color: rgb(221, 221, 221);">
        <p></p>
        <p></p>
        <p></p>
        Powered by:<p></p>
        <img src="/images/Square_credit-card-logos.png" height="110"/ style="padding: 20px;"><br>
    </div>
</div>



