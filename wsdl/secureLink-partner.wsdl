<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions targetNamespace="http://service.secureLink.touchnet.com"
                  xmlns:secureLinkImpl="http://service.secureLink.touchnet.com"
                  xmlns:secureLinkTypes="http://types.secureLink.touchnet.com"
                  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/"
                  xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <!-- note that the targetNamespace here defines the package in the generated java code.
         Anyplace where there is a namespace of "typens" it is associated with types.secureLink.touchnet.com.
         Although there is a url associated with the namespace, there is not necessarily a web server
         waiting to respond to requests to that the URL.
     -->
    <schema elementFormDefault="qualified"
            targetNamespace="http://types.secureLink.touchnet.com"
            xmlns="http://www.w3.org/2001/XMLSchema">

      <!-- This is the error object that gets thrown by all of the operations.  
           code: response code from the transaction.
           description: message returned by the transaction or generated by the webservice code
       -->
      <complexType name="SecureLinkException">
        <sequence>
          <element name="code"            type="xsd:int"/>
          <element name="description"     type="xsd:string" nillable="true"/>
        </sequence>
      </complexType>

      <!-- Request class that allows name/value pairs to be added to a ticket request.
           name: property name
           value: property value
       -->
      <complexType name="nameValuePair" >
        <sequence>
          <element name="name"               type="xsd:string" />
          <element name="value"              type="xsd:string" />
        </sequence>
      </complexType>

      <!-- Request class for generating a secure link ticket
           ticketName: name for the ticket assigned by the merchant (the webservice infers no meaning from this name)
       -->
      <complexType name="GenerateSecureLinkTicketRequest">
        <sequence>
          <element name="ticketName"         type="xsd:string" />
          <element name="nameValuePairs"     type="secureLinkTypes:nameValuePair" minOccurs="0" maxOccurs="unbounded" />
        </sequence>
      </complexType>
      <!-- Response class for GenerateSecureLinkTicket 
           ticket: Unique identifier for the ticket.
           ticketExpire: expiration date of the the ticket.  This ticket will be destroyed once account
             information has been stored for it (which in turn generates a new ticket)
       -->
      <complexType name="GenerateSecureLinkTicketResponse">
        <sequence>
          <element name="ticket"          type="xsd:string" />
          <element name="ticketExpire"    type="xsd:dateTime"/>
        </sequence>
      </complexType>
      <!-- Application specific log data element; this is basically an xml element.  
           Resulting xml sent to the application is created by unpacking these
           elements and constructing xml under a top level TOUCHNET tag.  Note that it
           is straight-forward to create invalid xml using this scheme; if the data
           supplied by the caller creates invalid xml the transaction will error out.
           name: The tag name
           value: The tag value
           children: tags that are children of this node
           attributes: attribute name/value pairs
       -->
      <complexType name="ApplicationSpecificLogData">
        <sequence>
          <element name="name"            type="xsd:string"/>
          <element name="value"           type="xsd:string" nillable="true"/>
          <element name="children"        type="secureLinkTypes:ApplicationSpecificLogData" minOccurs="0" maxOccurs="unbounded" />
          <element name="attributes"      type="secureLinkTypes:ApplicationSpecificLogData" minOccurs="0" maxOccurs="unbounded" />
        </sequence>
      </complexType>
      <!-- Request class for authorizations.  All amounts are specified in pennies.  Account data 
           is retreived from the stored session.
           amount: amount to authorize
           subAmount: additional amount already included in the amount; (processor optional for tax)
           invoiceNumber: invoice number to be included for processors supporting commercial card
           ancillaryData: data to be logged in generic log field
           application: application name to be used if application specific logging is enabled
           logData: application specific log data
           capture: if true, the capture request will be executed for successful authorizations
       -->
      <complexType name="AuthorizeAccountRequest" >
        <sequence>
          <element name="session"         type="xsd:string" />
          <element name="invoiceNumber"   type="xsd:string" nillable="true"/>
          <element name="ancillaryData"   type="xsd:string" nillable="true"/>
          <element name="application"     type="xsd:string" nillable="true"/>
          <element name="logData"         type="secureLinkTypes:ApplicationSpecificLogData" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </complexType>

      <!-- Response class for all credit card authorizations.  Response values 
           for cvv2 and avs should not be interpreted if the service is unavailable
           (e.g., a false cvv2Succeeded value should not be interpreted as implying
           any meaning if cvv2Available is false).  Note that not all processors provide
           separate zip code and address status values.
           approvalCode: the approval code returned by the processor
           receiptNumber: the unique identifier generated by payment gateway
           cvv2Available: true if the cvv2 service is available and cvv2 was provided
           cvv2Succeeded: true if cvv2 was available and correct.
           avsAvailable: true if address verification service was available and data was provided
           avsSucceeded: true if avs was available the request matched given the criteria configured
                         in payment gateway.
           avsZipStatus: true if avs was available and the zip code correct
           avsAddrStatus: true if avs was available and the address was correct
       -->
      <complexType name="CreditCardAuthResponse">
        <sequence>
          <element name="approvalCode"    type="xsd:string"/>
          <element name="receiptNumber"   type="xsd:string"/>
          <element name="cvv2Available"   type="xsd:boolean"/>
          <element name="cvv2Succeeded"   type="xsd:boolean"/>
          <element name="avsAvailable"    type="xsd:boolean"/>
          <element name="avsSucceeded"    type="xsd:boolean"/>
          <element name="avsZipStatus"    type="xsd:boolean"/>
          <element name="avsAddrStatus"   type="xsd:boolean"/>
          <element name="creditCardInfo"  type="secureLinkTypes:StoreCreditCardInfoResponse"/>
        </sequence>
      </complexType>
      <!-- Response data for an ACH payment request.
           receiptNumber: the unique identifier generated by payment gateway
           agreementNumber: the unique identifier for the agreement if one was generated
           bankName: name of bank returned from routing number validation
           bankAddress: Address for the bank
           bankCityStateZip:  bank city state and zip
           maskedAccountNumber: account number with X's replacing all but the last 4 digits; 
                                if showing 4 digits exposes more than half of the account number
                                then only half of the account number will be left unmasked.
       -->
      <complexType name="AchMakePaymentResponse">
        <sequence>
          <element name="receiptNumber"   type="xsd:string" />
          <element name="agreementNumber" type="xsd:string" nillable="true"/>
          <element name="bankName"            type="xsd:string" />
          <element name="bankAddress"         type="xsd:string" />
          <element name="bankCityStateZip"    type="xsd:string" />
          <element name="maskedAccountNumber" type="xsd:string" />
        </sequence>
      </complexType>
      <!-- Response information for credit card receipt.
           creditCardType: type of card (CreditCardGetAcceptedCardsResponseItem::issuerName)
           maskedAccountNumber: all but last 4 digit masked with X's
       -->
      <complexType name="StoreCreditCardInfoResponse" >
        <sequence>
          <element name="creditCardType"      type="xsd:string" />
          <element name="maskedAccountNumber" type="xsd:string" />
        </sequence>
      </complexType>
      <!-- Response class for all account authorizations.  Only one of the response
           elements will be present.
           ticketName: The name used to create the original ticket
           nameValuePairs: Name/value pairs stored when the ticket was generated
           achResponse: response if the request was for an ach payment
           creditResposne: response if the request was for a credit payment.
       -->
      <complexType name="AuthorizeAccountResponse">
        <sequence>
          <element name="ticketName"       type="xsd:string" />
          <element name="nameValuePairs"   type="secureLinkTypes:nameValuePair" minOccurs="0" maxOccurs="unbounded" />
          <element name="achResponse"      type="secureLinkTypes:AchMakePaymentResponse" nillable="true"/>
          <element name="creditResponse"   type="secureLinkTypes:CreditCardAuthResponse" nillable="true"/>
        </sequence>
      </complexType>

		  <!-- Request data for adjusting the balance of a completed payment.

           NOTE: If the payment was a recurring payment, you must send the receiptNumber in
                 order to identify the payment to adjust.

           session: the unique session identifier
           receiptNumber: the unique identifier generated by payment gateway
           amount: the amount in cents to give back
           ancillaryData: (optional) data to be logged in generic log field (max. length 128)
           application: (optional) application name to be used if application specific logging is enabled (max. length 10)
       -->
      <complexType name="AdjustBalanceRequest">
        <sequence>
          <element name="session"        type="xsd:string"/>
          <element name="receiptNumber"  type="xsd:string" minOccurs="0"/>
          <element name="amount"         type="xsd:long"/>
          <element name="ancillaryData"  type="xsd:string" nillable="true" minOccurs="0"/>
          <element name="application"    type="xsd:string" nillable="true" minOccurs="0"/>
        </sequence>
      </complexType>

      <!-- Request class for recurring account authorizations.

           session: the unique session identifier
           amount: the amount of the payment in cents
           ancillaryData: (optional) data to be logged in generic log field
           application: (optional) application name to be used for reporting
       -->
      <complexType name="AuthorizeRecurringAccountRequest" >
        <sequence>
          <element name="session"         type="xsd:string"/>
          <element name="amount"          type="xsd:long"/>
          <element name="ancillaryData"   type="xsd:string" nillable="true" minOccurs="0"/>
          <element name="application"     type="xsd:string" nillable="true" minOccurs="0"/>
        </sequence>
      </complexType>

      <!-- Response class for all recurring account authorizations.  Only one of the response
           elements will be present, either achResponse or creditResponse.

           achResponse: response if the request was for an ach payment
           creditResposne: response if the request was for a credit payment.
       -->
      <complexType name="AuthorizeRecurringAccountResponse">
        <sequence>
          <element name="achResponse"      type="secureLinkTypes:AchMakePaymentResponse" nillable="true" minOccurs="0"/>
          <element name="creditResponse"   type="secureLinkTypes:CreditCardAuthResponse" nillable="true" minOccurs="0"/>
        </sequence>
      </complexType>

      <!-- Request class for removing a recurring account.
      
           NOTE: It is highly recommended to call this upon completion of the recurring payment schedule.
                 This will allow TouchNet to clean up any sensitive data stored to perform payments.
                 You will still be able to call adjustBalance if needed.

           session: the unique session identifier
       -->
      <complexType name="RemoveRecurringAccountRequest">
        <sequence>
          <element name="session"   type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Request class for validation that the session ID for a recurring account is valid.

           session: the unique session identifier
       -->
      <complexType name="ValidateRecurringAccountRequest">
        <sequence>
          <element name="session"   type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Response class for validating a session ID for recurring account.
      
           valid: true if the recurring account is still available to attempt payments towards,
                  otherwise false
           pmtMethodExpDate: the month and year the recurring account is good through (format: MMYYYY)
                                example: 062014
       -->
      <complexType name="ValidateRecurringAccountResponse">
        <sequence>
          <element name="valid"             type="xsd:boolean"/>
          <element name="pmtMethodExpDate"  type="xsd:string" minOccurs="0"/>
        </sequence>
      </complexType>

      <!-- Elements from the classes.  The type is the complexType from the schema, the name
           specified for the element is then used in the wsdl:message/wsdl:part tag below
       -->
      <element name="fault"                                     type="secureLinkTypes:SecureLinkException"/>
      <element name="generateSecureLinkTicketRequest"           type="secureLinkTypes:GenerateSecureLinkTicketRequest" />
      <element name="generateSecureLinkTicketResponse"          type="secureLinkTypes:GenerateSecureLinkTicketResponse" />
      <element name="authorizeAccountRequest"                   type="secureLinkTypes:AuthorizeAccountRequest" />
      <element name="authorizeAccountResponse"                  type="secureLinkTypes:AuthorizeAccountResponse" />
      <element name="adjustBalanceRequest"                      type="secureLinkTypes:AdjustBalanceRequest"/>
      <element name="authorizeRecurringAccountRequest"          type="secureLinkTypes:AuthorizeRecurringAccountRequest"/>
      <element name="authorizeRecurringAccountResponse"         type="secureLinkTypes:AuthorizeRecurringAccountResponse"/>
      <element name="removeRecurringAccountRequest"             type="secureLinkTypes:RemoveRecurringAccountRequest"/>
      <element name="validateRecurringAccountRequest"           type="secureLinkTypes:ValidateRecurringAccountRequest"/>
      <element name="validateRecurringAccountResponse"          type="secureLinkTypes:ValidateRecurringAccountResponse"/>
    </schema>
  </wsdl:types>
  <!-- The name here is used in the operation below; the element comes from the schema above -->
  <wsdl:message name="secureLinkException">
    <wsdl:part element="secureLinkTypes:fault"  name="fault"/>
  </wsdl:message>
  <wsdl:message name="generateSecureLinkTicketRequest">
    <wsdl:part element="secureLinkTypes:generateSecureLinkTicketRequest" name="request"/>
  </wsdl:message>
  <wsdl:message name="generateSecureLinkTicketResponse">
    <wsdl:part element="secureLinkTypes:generateSecureLinkTicketResponse" name="response"/>
  </wsdl:message>
  <wsdl:message name="authorizeAccountRequest">
    <wsdl:part element="secureLinkTypes:authorizeAccountRequest" name="request"/>
  </wsdl:message>
  <wsdl:message name="authorizeAccountResponse">
    <wsdl:part element="secureLinkTypes:authorizeAccountResponse" name="response"/>
  </wsdl:message>
  <wsdl:message name="adjustBalanceRequest">
    <wsdl:part element="secureLinkTypes:adjustBalanceRequest" name="request"/>
  </wsdl:message>
  <wsdl:message name="emptyResponse"/>
  <wsdl:message name="authorizeRecurringAccountRequest">
    <wsdl:part element="secureLinkTypes:authorizeRecurringAccountRequest" name="request"/>
  </wsdl:message>
  <wsdl:message name="authorizeRecurringAccountResponse">
    <wsdl:part element="secureLinkTypes:authorizeRecurringAccountResponse" name="response"/>
  </wsdl:message>
  <wsdl:message name="removeRecurringAccountRequest">
    <wsdl:part element="secureLinkTypes:removeRecurringAccountRequest" name="request"/>
  </wsdl:message>
  <wsdl:message name="validateRecurringAccountRequest">
    <wsdl:part element="secureLinkTypes:validateRecurringAccountRequest" name="request"/>
  </wsdl:message>
  <wsdl:message name="validateRecurringAccountResponse">
    <wsdl:part element="secureLinkTypes:validateRecurringAccountResponse" name="response"/>
  </wsdl:message>

  <!-- The web service.  The name here will be used as the base for several classes. 
       The secureLinkImpl: namespace was defined above as http://service.secureLink.touchnet.com; 
       that puts the TPGSecureLink class (and related classes) in the service.secureLink.touchnet.com 
       package.  Each of these operations will have the name specified in the operation
       tag and will use the types associated with the names listed above for the parameters
       and will throw the fault class listed.
   -->
  <wsdl:portType name="TPGSecureLink">
    <wsdl:operation name="generateSecureLinkTicket">
      <wsdl:input  message="secureLinkImpl:generateSecureLinkTicketRequest"           name="generateSecureLinkTicketRequest"/>
      <wsdl:output message="secureLinkImpl:generateSecureLinkTicketResponse"          name="generateSecureLinkTicketResponse"/>
      <wsdl:fault  message="secureLinkImpl:secureLinkException"                       name="secureLinkException"/>
    </wsdl:operation>
    <wsdl:operation name="authorizeAccount">
      <wsdl:input  message="secureLinkImpl:authorizeAccountRequest"                   name="authorizeAccountRequest"/>
      <wsdl:output message="secureLinkImpl:authorizeAccountResponse"                  name="authorizeAccountResponse"/>
      <wsdl:fault  message="secureLinkImpl:secureLinkException"                       name="secureLinkException"/>
    </wsdl:operation>
    <wsdl:operation name="adjustBalance">
    	<wsdl:input  message="secureLinkImpl:adjustBalanceRequest"                      name="adjustBalanceRequest"/>
    	<wsdl:output message="secureLinkImpl:emptyResponse"                             name="adjustBalanceResponse"/>
    	<wsdl:fault  message="secureLinkImpl:secureLinkException"                       name="secureLinkException"/>
    </wsdl:operation>
    <wsdl:operation name="authorizeRecurringAccount">
      <wsdl:input  message="secureLinkImpl:authorizeRecurringAccountRequest"          name="authorizeRecurringAccountRequest"/>
      <wsdl:output message="secureLinkImpl:authorizeRecurringAccountResponse"         name="authorizeRecurringAccountResponse"/>
      <wsdl:fault  message="secureLinkImpl:secureLinkException"                       name="secureLinkException"/>
    </wsdl:operation>
    <wsdl:operation name="removeRecurringAccount">
      <wsdl:input  message="secureLinkImpl:removeRecurringAccountRequest"             name="removeRecurringAccountRequest"/>
      <wsdl:output message="secureLinkImpl:emptyResponse"                             name="removeRecurringAccountResponse"/>
      <wsdl:fault  message="secureLinkImpl:secureLinkException"                       name="secureLinkException"/>
    </wsdl:operation>
    <wsdl:operation name="validateRecurringAccount">
      <wsdl:input  message="secureLinkImpl:validateRecurringAccountRequest"           name="validateRecurringAccountRequest"/>
      <wsdl:output message="secureLinkImpl:validateRecurringAccountResponse"          name="validateRecurringAccountResponse"/>
      <wsdl:fault  message="secureLinkImpl:secureLinkException"                       name="secureLinkException"/>
    </wsdl:operation>
  </wsdl:portType>
  <!-- Define the message format and protocol -->
  <wsdl:binding name="TPGSecureLink" type="secureLinkImpl:TPGSecureLink">
    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="generateSecureLinkTicket">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="generateSecureLinkTicketRequest"><wsdlsoap:body use="literal"/></wsdl:input>
      <wsdl:output name="generateSecureLinkTicketResponse"><wsdlsoap:body use="literal"/></wsdl:output>
      <wsdl:fault  name="secureLinkException"><wsdlsoap:fault name="secureLinkException" use="literal"/></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="authorizeAccount">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="authorizeAccountRequest"><wsdlsoap:body use="literal"/></wsdl:input>
      <wsdl:output name="authorizeAccountResponse"><wsdlsoap:body use="literal"/></wsdl:output>
      <wsdl:fault  name="secureLinkException"><wsdlsoap:fault name="secureLinkException" use="literal"/></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="adjustBalance">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="adjustBalanceRequest"><wsdlsoap:body use="literal"/></wsdl:input>
      <wsdl:output name="adjustBalanceResponse"><wsdlsoap:body use="literal"/></wsdl:output>
      <wsdl:fault  name="secureLinkException"><wsdlsoap:fault name="secureLinkException" use="literal"/></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="authorizeRecurringAccount">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="authorizeRecurringAccountRequest"><wsdlsoap:body use="literal"/></wsdl:input>
      <wsdl:output name="authorizeRecurringAccountResponse"><wsdlsoap:body use="literal"/></wsdl:output>
      <wsdl:fault  name="secureLinkException"><wsdlsoap:fault name="secureLinkException" use="literal"/></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeRecurringAccount">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="removeRecurringAccountRequest"><wsdlsoap:body use="literal"/></wsdl:input>
      <wsdl:output name="removeRecurringAccountResponse"><wsdlsoap:body use="literal"/></wsdl:output>
      <wsdl:fault  name="secureLinkException"><wsdlsoap:fault name="secureLinkException" use="literal"/></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="validateRecurringAccount">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="validateRecurringAccountRequest"><wsdlsoap:body use="literal"/></wsdl:input>
      <wsdl:output name="validateRecurringAccountResponse"><wsdlsoap:body use="literal"/></wsdl:output>
      <wsdl:fault  name="secureLinkException"><wsdlsoap:fault name="secureLinkException" use="literal"/></wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="TPGSecureLink">
    <wsdl:port binding="secureLinkImpl:TPGSecureLink" name="TPGSecureLink">
      <!-- this will provide the default url for the web service -->
      <wsdlsoap:address location="https://test.secure.touchnet.net:8703/C30002test_tlink/services/TPGSecureLink1234_wrong"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
