//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gsmu.Api.Data.School.Entities
{
    using System;
    using System.Linq;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Validation;

    public partial class SchoolEntities : DbContext
    {
        /*
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }         
        */
         
        public override int SaveChanges()
        {
            // execute db funcitons related to schools
            // delete related records, fix column values
            var schoolChangeSet = ChangeTracker.Entries<School>();
            if (schoolChangeSet != null)
            {
                foreach (var entry in schoolChangeSet.Where(c => c.State != EntityState.Unchanged))
                {
                    // remove school relationships
                    if (entry.State == EntityState.Deleted) {
                        var relations = (from i in this.SchoolExtraInfoes where i.schoolid == entry.Entity.locationid select i).ToList();
                        this.SchoolExtraInfoes.RemoveRange(relations);
                    } 
                    // assign new ids to schools - generate new locationid
                    else if (!entry.Entity.locationid.HasValue || entry.Entity.locationid < 1)
                    {
                        entry.Entity.locationid = School.NextId;
                    }
                }
            }

            // execute db funcitons related to districts
            // delete related records, fix column values
            var districtChangeSet = ChangeTracker.Entries<District>();
            if (districtChangeSet != null)
            {
                // remove district relationships
                foreach (var entry in districtChangeSet.Where(c => c.State == EntityState.Deleted))
                {
                    var relations = (from i in this.DistrictExtraInfoes where i.districtID == entry.Entity.DISTID select i).ToList();
                    this.DistrictExtraInfoes.RemoveRange(relations);
                }
            }

            // execute db funcitons related to grade level
            // delete related records, fix column values
            var gradeChangeSet = ChangeTracker.Entries<Grade_Level>();
            if (gradeChangeSet != null)
            {
                // remove district relationships
                foreach (var entry in gradeChangeSet.Where(c => c.State == EntityState.Deleted))
                {
                    var relations = (from i in this.GradeExtraInfoes where i.gradeid == entry.Entity.GRADEID select i).ToList();
                    this.GradeExtraInfoes.RemoveRange(relations);
                }
            }
            try
            {
                return base.SaveChanges();
            }
            catch(DbEntityValidationException ex)
                {

                    foreach (var e in ex.EntityValidationErrors)
                    {
                        foreach (var ee in e.ValidationErrors)
                        {
                            string a = ee.PropertyName;
                        }

                     }
                    return base.SaveChanges();
                }
        }
    }
}
