//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gsmu.Api.Data.School.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.EntityClient;
    //using System.Data.Objects;
    //using System.Data.Objects.DataClasses;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolEntities : DbContext, ISchoolEntities
    {
        public SchoolEntities()
            : base("name=SchoolEntities")
        {
        }
    	public SchoolEntities(string connectionString)
    		: base(connectionString)
    	{
    	}
    
    	static SchoolEntities()
    	{
    		System.Data.Entity.Database.SetInitializer<SchoolEntities>(null);
    	}
    
    	public static SchoolEntities Create(string providerConnectionStrin)
    	{
    		var entityBuilder = new EntityConnectionStringBuilder();
    
    		// use your ADO.NET connection string
    		entityBuilder.ProviderConnectionString = providerConnectionStrin;
    
    		entityBuilder.Provider = "System.Data.SqlClient";
    
    		// Set the Metadata location.
    		entityBuilder.Metadata = @"res://*/Database.DWH.DWModel.csdl|res://*/Database.DWH.DWModel.ssdl|res://*/Database.DWH.DWModel.msl";
    		return new SchoolEntities(entityBuilder.ConnectionString);
    	}
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AdHocReportTemplate> AdHocReportTemplates { get; set; }
        public DbSet<adminpass> adminpasses { get; set; }
        public DbSet<Attendance> Attendances { get; set; }
        public DbSet<AttendanceDetail> AttendanceDetails { get; set; }
        public DbSet<AttendanceStatu> AttendanceStatus { get; set; }
        public DbSet<Audience> Audiences { get; set; }
        public DbSet<AuditTrail> AuditTrails { get; set; }
        public DbSet<BlackboardLog> BlackboardLogs { get; set; }
        public DbSet<BlackboardServersInfo> BlackboardServersInfoes { get; set; }
        public DbSet<BlackboardUserRole> BlackboardUserRoles { get; set; }
        public DbSet<Certification> Certifications { get; set; }
        public DbSet<CertificationsCourse> CertificationsCourses { get; set; }
        public DbSet<CertificationsStudent> CertificationsStudents { get; set; }
        public DbSet<CertificationsStudentCompleted> CertificationsStudentCompleteds { get; set; }
        public DbSet<CitrixLog> CitrixLogs { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<Coupon> Coupons { get; set; }
        public DbSet<Course_Roster> Course_Rosters { get; set; }
        public DbSet<Course_Time> Course_Times { get; set; }
        public DbSet<Course_Times_Menu> Course_Times_Menus { get; set; }
        public DbSet<coursearchive> coursearchives { get; set; }
        public DbSet<CourseCategory> CourseCategories { get; set; }
        public DbSet<CourseChoice> CourseChoices { get; set; }
        public DbSet<CourseExpense> CourseExpenses { get; set; }
        public DbSet<CourseOutline> CourseOutlines { get; set; }
        public DbSet<CoursePricingOption> CoursePricingOptions { get; set; }
        public DbSet<Course> Courses { get; set; }
        public DbSet<CoursesPendingRequest> CoursesPendingRequests { get; set; }
        public DbSet<CoursesRequirement> CoursesRequirements { get; set; }
        public DbSet<CourseSurveyNIU> CourseSurveyNIUs { get; set; }
        public DbSet<customcetificate> customcetificates { get; set; }
        public DbSet<customtranscript> customtranscripts { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<District> Districts { get; set; }
        public DbSet<EmailAuditTrail> EmailAuditTrails { get; set; }
        public DbSet<EmailList> EmailLists { get; set; }
        public DbSet<EmployeeType> EmployeeTypes { get; set; }
        public DbSet<FieldMask> FieldMasks { get; set; }
        public DbSet<FieldSpec> FieldSpecs { get; set; }
        public DbSet<Grade_Level> Grade_Levels { get; set; }
        public DbSet<HeliusLMSlog> HeliusLMSlogs { get; set; }
        public DbSet<Icon> Icons { get; set; }
        public DbSet<InstructorRate> InstructorRates { get; set; }
        public DbSet<Instructor> Instructors { get; set; }
        public DbSet<licenseinfo> licenseinfoes { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<Manager> Managers { get; set; }
        public DbSet<MasterInfo2> MasterInfo2 { get; set; }
        public DbSet<MasterInfo3> MasterInfo3 { get; set; }
        public DbSet<masterinfo4> masterinfo4 { get; set; }
        public DbSet<Material> Materials { get; set; }
        public DbSet<NavLink> NavLinks { get; set; }
        public DbSet<NEWEMP> NEWEMPS { get; set; }
        public DbSet<OptionalInfo> OptionalInfoes { get; set; }
        public DbSet<OrderInProgress> OrderInProgresses { get; set; }
        public DbSet<OrderTransaction> OrderTransactions { get; set; }
        public DbSet<ParentLevelOne> ParentLevelOnes { get; set; }
        public DbSet<ParentLevelThree> ParentLevelThrees { get; set; }
        public DbSet<ParentLevelTwo> ParentLevelTwoes { get; set; }
        public DbSet<ParentLevelTwoToThreeRelated> ParentLevelTwoToThreeRelateds { get; set; }
        public DbSet<Parent> Parents { get; set; }
        public DbSet<Payment_Option> Payment_Options { get; set; }
        public DbSet<PDFHeaderFooterInfo> PDFHeaderFooterInfoes { get; set; }
        public DbSet<PricingOption> PricingOptions { get; set; }
        public DbSet<ReportRequest> ReportRequests { get; set; }
        public DbSet<RoomDirection> RoomDirections { get; set; }
        public DbSet<RoommateRequest> RoommateRequests { get; set; }
        public DbSet<RoomNumber> RoomNumbers { get; set; }
        public DbSet<rostermaterial> rostermaterials { get; set; }
        public DbSet<SalesTax> SalesTaxes { get; set; }
        public DbSet<SAPIntegration> SAPIntegrations { get; set; }
        public DbSet<SAPIntegrationFunction> SAPIntegrationFunctions { get; set; }
        public DbSet<SchoolExtraInfo> SchoolExtraInfoes { get; set; }
        public DbSet<School> Schools { get; set; }
        public DbSet<SchoolsGradeLevelsRelated> SchoolsGradeLevelsRelateds { get; set; }
        public DbSet<StudentMedicalInfo> StudentMedicalInfoes { get; set; }
        public DbSet<StudentMergeHistory> StudentMergeHistories { get; set; }
        public DbSet<StudentQuestionnaire> StudentQuestionnaires { get; set; }
        public DbSet<StudentRate> StudentRates { get; set; }
        public DbSet<StudentRegSortOrder> StudentRegSortOrders { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<StudentsGradeLog> StudentsGradeLogs { get; set; }
        public DbSet<StudentValidation> StudentValidations { get; set; }
        public DbSet<SubAdminToSubSite> SubAdminToSubSites { get; set; }
        public DbSet<SubSite> SubSites { get; set; }
        public DbSet<Supervisor> Supervisors { get; set; }
        public DbSet<SupervisorSchool> SupervisorSchools { get; set; }
        public DbSet<Terminology> Terminologies { get; set; }
        public DbSet<transcriptimport> transcriptimports { get; set; }
        public DbSet<Transcript> Transcripts { get; set; }
        public DbSet<UpdateTracking> UpdateTrackings { get; set; }
        public DbSet<uploadedfile> uploadedfiles { get; set; }
        public DbSet<customimptemp> customimptemps { get; set; }
        public DbSet<DistrictExtraInfo> DistrictExtraInfoes { get; set; }
        public DbSet<EmailQueue> EmailQueues { get; set; }
        public DbSet<GradeExtraInfo> GradeExtraInfoes { get; set; }
        public DbSet<UserBBDateInformation> UserBBDateInformations { get; set; }
        public DbSet<WebServiceSetting> WebServiceSettings { get; set; }
        public DbSet<FastTrackCours> FastTrackCourses { get; set; }
        public DbSet<MasterInfo> MasterInfoes { get; set; }
        public DbSet<MainCategory> MainCategories { get; set; }
        public DbSet<SubCategory> SubCategories { get; set; }
        public DbSet<SubSubCategory> SubSubCategories { get; set; }
        public DbSet<CourseExtraParticipant> CourseExtraParticipants { get; set; }
        public DbSet<SupervisorStudent> SupervisorStudents { get; set; }
        public DbSet<Membership> Memberships { get; set; }
        public DbSet<Membership_Roster> Membership_Rosters { get; set; }
        public DbSet<ReviewOrderView> ReviewOrderViews { get; set; }
        public DbSet<RosterReportView> RosterReportViews { get; set; }
        public DbSet<CoursesListView> CoursesListViews { get; set; }
        public DbSet<CoursePreReg> CoursePreRegs { get; set; }
        public DbSet<AutoReserveCourse> AutoReserveCourses { get; set; }
        public DbSet<DynamicMembershipConfiguration> DynamicMembershipConfigurations { get; set; }
        public DbSet<AdminMenuSelection> AdminMenuSelections { get; set; }
        public DbSet<BackgroundProcessRequest> BackgroundProcessRequests { get; set; }
        public DbSet<DynamicMembershipPricingOption> DynamicMembershipPricingOptions { get; set; }
        public DbSet<CourseListAdminPortalView> CourseListAdminPortalViews { get; set; }
        public DbSet<WizardConfiguration> WizardConfigurations { get; set; }
        public DbSet<CoursesGridComn> CoursesGridComns { get; set; }
        public DbSet<RosterCostMaterialGridComn> RosterCostMaterialGridComns { get; set; }
        public DbSet<StudentsGridComn> StudentsGridComns { get; set; }
        public DbSet<StudentsOtherInfoView> StudentsOtherInfoViews { get; set; }
        public DbSet<AdministratorReportView> AdministratorReportViews { get; set; }
        public DbSet<CRMaterialListView> CRMaterialListViews { get; set; }
        public DbSet<OrderDetailView> OrderDetailViews { get; set; }
        public DbSet<AttendanceView> AttendanceViews { get; set; }
        public DbSet<CourseRosterMoreInfoView> CourseRosterMoreInfoViews { get; set; }
    
        public virtual ObjectResult<GetAllMasterInfoes_Result> GetAllMasterInfoes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllMasterInfoes_Result>("GetAllMasterInfoes");
        }
    
        public virtual int UpdateAllMasterInfoes(string field, string value)
        {
            var fieldParameter = field != null ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAllMasterInfoes", fieldParameter, valueParameter);
        }
    
        public virtual ObjectResult<string> GetSingleFieldMasterInfoes(string field, string table)
        {
            var fieldParameter = field != null ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(string));
    
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSingleFieldMasterInfoes", fieldParameter, tableParameter);
        }

        public virtual ObjectResult<sp_DailyAccountingGrid_Result> sp_DailyAccountingGrid(string search, string zeroDollar, string showRefund, string mainCategory, string subCategory, string subSubCategory, string dateRangeType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string sortByType, string sortByVal, string sortCol, string sortOrder, Nullable<int> start, Nullable<int> length)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));

            var zeroDollarParameter = zeroDollar != null ?
                new ObjectParameter("ZeroDollar", zeroDollar) :
                new ObjectParameter("ZeroDollar", typeof(string));

            var showRefundParameter = showRefund != null ?
                new ObjectParameter("ShowRefund", showRefund) :
                new ObjectParameter("ShowRefund", typeof(string));

            var mainCategoryParameter = mainCategory != null ?
                new ObjectParameter("MainCategory", mainCategory) :
                new ObjectParameter("MainCategory", typeof(string));

            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));

            var subSubCategoryParameter = subSubCategory != null ?
                new ObjectParameter("SubSubCategory", subSubCategory) :
                new ObjectParameter("SubSubCategory", typeof(string));

            var dateRangeTypeParameter = dateRangeType != null ?
                new ObjectParameter("DateRangeType", dateRangeType) :
                new ObjectParameter("DateRangeType", typeof(string));

            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));

            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));

            var sortByTypeParameter = sortByType != null ?
                new ObjectParameter("sortByType", sortByType) :
                new ObjectParameter("sortByType", typeof(string));

            var sortByValParameter = sortByVal != null ?
                new ObjectParameter("sortByVal", sortByVal) :
                new ObjectParameter("sortByVal", typeof(string));

            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));

            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));

            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));

            var lengthParameter = length.HasValue ?
                new ObjectParameter("length", length) :
                new ObjectParameter("length", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyAccountingGrid_Result>("sp_DailyAccountingGrid", searchParameter, zeroDollarParameter, showRefundParameter, mainCategoryParameter, subCategoryParameter, subSubCategoryParameter, dateRangeTypeParameter, dateFromParameter, dateToParameter, sortByTypeParameter, sortByValParameter, sortColParameter, sortOrderParameter, startParameter, lengthParameter);
        }

        public virtual ObjectResult<sp_RosterReportV2_Result> sp_RosterReportV2(string search, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> cancelled, string categorymain, string categorysub, string categorysubsub, string mainSort, string mainOrder, string sortCol, string sortOrder, Nullable<int> start, Nullable<int> length)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));

            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));

            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));

            var cancelledParameter = cancelled.HasValue ?
                new ObjectParameter("cancelled", cancelled) :
                new ObjectParameter("cancelled", typeof(int));

            var categorymainParameter = categorymain != null ?
                new ObjectParameter("categorymain", categorymain) :
                new ObjectParameter("categorymain", typeof(string));

            var categorysubParameter = categorysub != null ?
                new ObjectParameter("categorysub", categorysub) :
                new ObjectParameter("categorysub", typeof(string));

            var categorysubsubParameter = categorysubsub != null ?
                new ObjectParameter("categorysubsub", categorysubsub) :
                new ObjectParameter("categorysubsub", typeof(string));

            var mainSortParameter = mainSort != null ?
                new ObjectParameter("MainSort", mainSort) :
                new ObjectParameter("MainSort", typeof(string));

            var mainOrderParameter = mainOrder != null ?
                new ObjectParameter("MainOrder", mainOrder) :
                new ObjectParameter("MainOrder", typeof(string));

            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));

            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));

            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));

            var lengthParameter = length.HasValue ?
                new ObjectParameter("length", length) :
                new ObjectParameter("length", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RosterReportV2_Result>("sp_RosterReportV2", searchParameter, datefromParameter, datetoParameter, cancelledParameter, categorymainParameter, categorysubParameter, categorysubsubParameter, mainSortParameter, mainOrderParameter, sortColParameter, sortOrderParameter, startParameter, lengthParameter);
        }


        public virtual ObjectResult<sp_RevenueProfitAndLossGrid_Result> sp_RevenueProfitAndLossGrid(string search, string zeroDollar, string showRefund, string mainCategory, string subCategory, string subSubCategory, string dateRangeType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string sortByType, string sortByVal, string sortCol, string sortOrder, Nullable<int> start, Nullable<int> length)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var zeroDollarParameter = zeroDollar != null ?
                new ObjectParameter("ZeroDollar", zeroDollar) :
                new ObjectParameter("ZeroDollar", typeof(string));
    
            var showRefundParameter = showRefund != null ?
                new ObjectParameter("ShowRefund", showRefund) :
                new ObjectParameter("ShowRefund", typeof(string));
    
            var mainCategoryParameter = mainCategory != null ?
                new ObjectParameter("MainCategory", mainCategory) :
                new ObjectParameter("MainCategory", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            var subSubCategoryParameter = subSubCategory != null ?
                new ObjectParameter("SubSubCategory", subSubCategory) :
                new ObjectParameter("SubSubCategory", typeof(string));
    
            var dateRangeTypeParameter = dateRangeType != null ?
                new ObjectParameter("DateRangeType", dateRangeType) :
                new ObjectParameter("DateRangeType", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var sortByTypeParameter = sortByType != null ?
                new ObjectParameter("sortByType", sortByType) :
                new ObjectParameter("sortByType", typeof(string));
    
            var sortByValParameter = sortByVal != null ?
                new ObjectParameter("sortByVal", sortByVal) :
                new ObjectParameter("sortByVal", typeof(string));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("length", length) :
                new ObjectParameter("length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RevenueProfitAndLossGrid_Result>("sp_RevenueProfitAndLossGrid", searchParameter, zeroDollarParameter, showRefundParameter, mainCategoryParameter, subCategoryParameter, subSubCategoryParameter, dateRangeTypeParameter, dateFromParameter, dateToParameter, sortByTypeParameter, sortByValParameter, sortColParameter, sortOrderParameter, startParameter, lengthParameter);
        }

    
        public virtual int UpdateFieldSpecs(string field, string value, string id)
        {
            var fieldParameter = field != null ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFieldSpecs", fieldParameter, valueParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_EnrollmentGraphSummary_Result> sp_EnrollmentGraphSummary(string dateRangeType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateRangeTypeParameter = dateRangeType != null ?
                new ObjectParameter("DateRangeType", dateRangeType) :
                new ObjectParameter("DateRangeType", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EnrollmentGraphSummary_Result>("sp_EnrollmentGraphSummary", dateRangeTypeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_StudentGraphSummary_Result> sp_StudentGraphSummary(string dateRangeType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateRangeTypeParameter = dateRangeType != null ?
                new ObjectParameter("DateRangeType", dateRangeType) :
                new ObjectParameter("DateRangeType", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StudentGraphSummary_Result>("sp_StudentGraphSummary", dateRangeTypeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int DynamicUpdateTableByID(string field, string idfield, string table, string value, string id)
        {
            var fieldParameter = field != null ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(string));
    
            var idfieldParameter = idfield != null ?
                new ObjectParameter("idfield", idfield) :
                new ObjectParameter("idfield", typeof(string));
    
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DynamicUpdateTableByID", fieldParameter, idfieldParameter, tableParameter, valueParameter, idParameter);
        }
    }
}
